import re
from typing import List, Sequence

tier1_punc = ".?!。？！"
tier2_punc = ",:;~-—，、：；"
tier3_punc = "\"'“”‘’（）《》【】[]「」『』<>·"


def cut5(inp: str, splits: Sequence[str]):
    """Cut one line of text into pieces."""
    items = re.split(f"([{''.join(re.escape(x) for x in splits)}])", inp)
    items = [item.strip() for item in items if item.strip()]
    if len(items) % 2 == 1:
        items.append("")
    mergeitems = [a + b for a, b in zip(items[0::2], items[1::2])]
    return mergeitems


def merge_short_texts(texts: List[str], threshold):
    """Merge short texts to longer ones. Texts are generated by cut5."""
    result: List[str] = []
    text = ""
    for ele in texts:
        text += ele
        if len(text) >= threshold:
            result.append(text)
            text = ""
    if text:
        result.append(text)
    return result

def add_space_around_english(text: str) -> str:
    """在英文单词前后添加空格，确保中英文之间有分隔"""
    text = re.sub(r'([a-zA-Z0-9]+)', r' \1 ', text)  # 匹配英文单词并在前后加空格
    text = re.sub(r'\s+', ' ', text)  # 规范化多个空格为单个空格
    return text.strip()

def clean_and_cut_text(text: str,threshold=30) -> List[str]:
    print("####处理文本####")
    print("输入文本:", text)
    new_text = ""
    for char in text:
        if char in tier2_punc:
            new_text += ","
        elif char in tier3_punc:
            new_text += " "
        else:
            new_text += char
    text = add_space_around_english(new_text)
    lines = [line.strip() for line in text.split("\n") if line.strip()]

    res: List[str] = []
    for line in lines:
        sents = [sent for sent in cut5(line, tier1_punc)]
        texts = [
            merged.strip()
            for sent in sents
            for merged in merge_short_texts(cut5(sent, ","), threshold)
        ]
        texts = merge_short_texts(texts, threshold)
        res.extend(texts)
    res = [("。" + x) if x[0] != "。" else x for x in res]
    print("处理结果:", res)
    return res
